// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;


contract ReceiveEther {
    address payable public rec;
    // Function to receive Ether. msg.data must be empty
    receive() external payable {}
        //uint256 share=msg.value;
        //rec.transfer(share);
    // Fallback function is called when msg.data is not empty
    fallback() external payable {}


    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}


contract SendEther {
    function sendViaTransfer(address payable _to) public payable {
        // This function is no longer recommended for sending Ether.
        _to.transfer(msg.value);
    }


    function sendViaSend(address payable _to) public payable {
        // Send returns a boolean value indicating success or failure.
        // This function is not recommended for sending Ether.
        bool sent = _to.send(msg.value);
        require(sent, "Failed to send Ether");
    }


    function sendViaCall(address payable _to) public payable {
        // Call returns a boolean value indicating success or failure.
        // This is the current recommended method to use.
        (bool sent, bytes memory data) = _to.call{value: msg.value}("test_msg");
        require(sent, "Failed to send Ether");
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------

//Splitter


pragma solidity ^0.8.15;
// SPDX-License-Identifier: MIT


contract PaymentSplitter  {
    address payable [] public recipients;
    event TransferReceived(address _from, uint _amount);
   
    constructor(address payable [] memory _addrs) {
        for(uint i=0; i<_addrs.length; i++){
            recipients.push(_addrs[i]);
        }
    }
   
    receive() payable external {
        uint256 share = msg.value / recipients.length;


        for(uint i=0; i < recipients.length; i++){
            recipients[i].transfer(share);
        }    
        emit TransferReceived(msg.sender, msg.value);
    }      
}

